/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p kcookiejar_interface /home/build/inkbox/compiled-binaries/arm-kobo-linux-gnueabihf/arm-kobo-linux-gnueabihf/sysroot/share/dbus-1/interfaces/kf5_org.kde.KCookieServer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KCOOKIEJAR_INTERFACE_H
#define KCOOKIEJAR_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.KCookieServer
 */
class OrgKdeKCookieServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KCookieServer"; }

public:
    OrgKdeKCookieServerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeKCookieServerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url) << QVariant::fromValue(cookieHeader) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("addCookies"), argumentList);
    }

    inline QDBusPendingReply<> addDOMCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url) << QVariant::fromValue(cookieHeader) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("addDOMCookies"), argumentList);
    }

    inline QDBusPendingReply<> deleteAllCookies()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("deleteAllCookies"), argumentList);
    }

    inline QDBusPendingReply<> deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(domain) << QVariant::fromValue(fqdn) << QVariant::fromValue(path) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("deleteCookie"), argumentList);
    }

    inline QDBusPendingReply<> deleteCookiesFromDomain(const QString &domain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(domain);
        return asyncCallWithArgumentList(QStringLiteral("deleteCookiesFromDomain"), argumentList);
    }

    inline QDBusPendingReply<> deleteSessionCookies(qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("deleteSessionCookies"), argumentList);
    }

    inline QDBusPendingReply<> deleteSessionCookiesFor(const QString &fqdn, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fqdn) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("deleteSessionCookiesFor"), argumentList);
    }

    inline QDBusPendingReply<QStringList> findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fields) << QVariant::fromValue(domain) << QVariant::fromValue(fqdn) << QVariant::fromValue(path) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("findCookies"), argumentList);
    }

    inline QDBusPendingReply<QString> findCookies(const QString &url, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("findCookies"), argumentList);
    }

    inline QDBusPendingReply<QString> findDOMCookies(const QString &url, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("findDOMCookies"), argumentList);
    }

    inline QDBusPendingReply<QString> findDOMCookies(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QStringLiteral("findDOMCookies"), argumentList);
    }

    inline QDBusPendingReply<QStringList> findDomains()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("findDomains"), argumentList);
    }

    inline QDBusPendingReply<QString> getDomainAdvice(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QStringLiteral("getDomainAdvice"), argumentList);
    }

    inline QDBusPendingReply<QString> listCookies(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QStringLiteral("listCookies"), argumentList);
    }

    inline QDBusPendingReply<> reloadPolicy()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reloadPolicy"), argumentList);
    }

    inline QDBusPendingReply<bool> setDomainAdvice(const QString &url, const QString &advice)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url) << QVariant::fromValue(advice);
        return asyncCallWithArgumentList(QStringLiteral("setDomainAdvice"), argumentList);
    }

    inline QDBusPendingReply<> shutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("shutdown"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKCookieServerInterface KCookieServer;
  }
}
#endif
