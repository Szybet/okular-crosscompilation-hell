/****************************************************************************
** Meta object code from reading C++ file 'kcookiejar_interface.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "kcookiejar_interface.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#include <QtCore/QList>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'kcookiejar_interface.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_OrgKdeKCookieServerInterface_t {
    QByteArrayData data[31];
    char stringdata0[434];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_OrgKdeKCookieServerInterface_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_OrgKdeKCookieServerInterface_t qt_meta_stringdata_OrgKdeKCookieServerInterface = {
    {
QT_MOC_LITERAL(0, 0, 28), // "OrgKdeKCookieServerInterface"
QT_MOC_LITERAL(1, 29, 10), // "addCookies"
QT_MOC_LITERAL(2, 40, 19), // "QDBusPendingReply<>"
QT_MOC_LITERAL(3, 60, 0), // ""
QT_MOC_LITERAL(4, 61, 3), // "url"
QT_MOC_LITERAL(5, 65, 12), // "cookieHeader"
QT_MOC_LITERAL(6, 78, 8), // "windowId"
QT_MOC_LITERAL(7, 87, 13), // "addDOMCookies"
QT_MOC_LITERAL(8, 101, 16), // "deleteAllCookies"
QT_MOC_LITERAL(9, 118, 12), // "deleteCookie"
QT_MOC_LITERAL(10, 131, 6), // "domain"
QT_MOC_LITERAL(11, 138, 4), // "fqdn"
QT_MOC_LITERAL(12, 143, 4), // "path"
QT_MOC_LITERAL(13, 148, 4), // "name"
QT_MOC_LITERAL(14, 153, 23), // "deleteCookiesFromDomain"
QT_MOC_LITERAL(15, 177, 20), // "deleteSessionCookies"
QT_MOC_LITERAL(16, 198, 23), // "deleteSessionCookiesFor"
QT_MOC_LITERAL(17, 222, 11), // "findCookies"
QT_MOC_LITERAL(18, 234, 30), // "QDBusPendingReply<QStringList>"
QT_MOC_LITERAL(19, 265, 10), // "QList<int>"
QT_MOC_LITERAL(20, 276, 6), // "fields"
QT_MOC_LITERAL(21, 283, 26), // "QDBusPendingReply<QString>"
QT_MOC_LITERAL(22, 310, 14), // "findDOMCookies"
QT_MOC_LITERAL(23, 325, 11), // "findDomains"
QT_MOC_LITERAL(24, 337, 15), // "getDomainAdvice"
QT_MOC_LITERAL(25, 353, 11), // "listCookies"
QT_MOC_LITERAL(26, 365, 12), // "reloadPolicy"
QT_MOC_LITERAL(27, 378, 15), // "setDomainAdvice"
QT_MOC_LITERAL(28, 394, 23), // "QDBusPendingReply<bool>"
QT_MOC_LITERAL(29, 418, 6), // "advice"
QT_MOC_LITERAL(30, 425, 8) // "shutdown"

    },
    "OrgKdeKCookieServerInterface\0addCookies\0"
    "QDBusPendingReply<>\0\0url\0cookieHeader\0"
    "windowId\0addDOMCookies\0deleteAllCookies\0"
    "deleteCookie\0domain\0fqdn\0path\0name\0"
    "deleteCookiesFromDomain\0deleteSessionCookies\0"
    "deleteSessionCookiesFor\0findCookies\0"
    "QDBusPendingReply<QStringList>\0"
    "QList<int>\0fields\0QDBusPendingReply<QString>\0"
    "findDOMCookies\0findDomains\0getDomainAdvice\0"
    "listCookies\0reloadPolicy\0setDomainAdvice\0"
    "QDBusPendingReply<bool>\0advice\0shutdown"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_OrgKdeKCookieServerInterface[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      17,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    3,   99,    3, 0x0a /* Public */,
       7,    3,  106,    3, 0x0a /* Public */,
       8,    0,  113,    3, 0x0a /* Public */,
       9,    4,  114,    3, 0x0a /* Public */,
      14,    1,  123,    3, 0x0a /* Public */,
      15,    1,  126,    3, 0x0a /* Public */,
      16,    2,  129,    3, 0x0a /* Public */,
      17,    5,  134,    3, 0x0a /* Public */,
      17,    2,  145,    3, 0x0a /* Public */,
      22,    2,  150,    3, 0x0a /* Public */,
      22,    1,  155,    3, 0x0a /* Public */,
      23,    0,  158,    3, 0x0a /* Public */,
      24,    1,  159,    3, 0x0a /* Public */,
      25,    1,  162,    3, 0x0a /* Public */,
      26,    0,  165,    3, 0x0a /* Public */,
      27,    2,  166,    3, 0x0a /* Public */,
      30,    0,  171,    3, 0x0a /* Public */,

 // slots: parameters
    0x80000000 | 2, QMetaType::QString, QMetaType::QByteArray, QMetaType::LongLong,    4,    5,    6,
    0x80000000 | 2, QMetaType::QString, QMetaType::QByteArray, QMetaType::LongLong,    4,    5,    6,
    0x80000000 | 2,
    0x80000000 | 2, QMetaType::QString, QMetaType::QString, QMetaType::QString, QMetaType::QString,   10,   11,   12,   13,
    0x80000000 | 2, QMetaType::QString,   10,
    0x80000000 | 2, QMetaType::LongLong,    6,
    0x80000000 | 2, QMetaType::QString, QMetaType::LongLong,   11,    6,
    0x80000000 | 18, 0x80000000 | 19, QMetaType::QString, QMetaType::QString, QMetaType::QString, QMetaType::QString,   20,   10,   11,   12,   13,
    0x80000000 | 21, QMetaType::QString, QMetaType::LongLong,    4,    6,
    0x80000000 | 21, QMetaType::QString, QMetaType::LongLong,    4,    6,
    0x80000000 | 21, QMetaType::QString,    4,
    0x80000000 | 18,
    0x80000000 | 21, QMetaType::QString,    4,
    0x80000000 | 21, QMetaType::QString,    4,
    0x80000000 | 2,
    0x80000000 | 28, QMetaType::QString, QMetaType::QString,    4,   29,
    0x80000000 | 2,

       0        // eod
};

void OrgKdeKCookieServerInterface::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<OrgKdeKCookieServerInterface *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: { QDBusPendingReply<> _r = _t->addCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QByteArray(*)>(_a[2])),(*reinterpret_cast< qlonglong(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 1: { QDBusPendingReply<> _r = _t->addDOMCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QByteArray(*)>(_a[2])),(*reinterpret_cast< qlonglong(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 2: { QDBusPendingReply<> _r = _t->deleteAllCookies();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 3: { QDBusPendingReply<> _r = _t->deleteCookie((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 4: { QDBusPendingReply<> _r = _t->deleteCookiesFromDomain((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 5: { QDBusPendingReply<> _r = _t->deleteSessionCookies((*reinterpret_cast< qlonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 6: { QDBusPendingReply<> _r = _t->deleteSessionCookiesFor((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< qlonglong(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 7: { QDBusPendingReply<QStringList> _r = _t->findCookies((*reinterpret_cast< const QList<int>(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])),(*reinterpret_cast< const QString(*)>(_a[5])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QStringList>*>(_a[0]) = std::move(_r); }  break;
        case 8: { QDBusPendingReply<QString> _r = _t->findCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< qlonglong(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 9: { QDBusPendingReply<QString> _r = _t->findDOMCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< qlonglong(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 10: { QDBusPendingReply<QString> _r = _t->findDOMCookies((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 11: { QDBusPendingReply<QStringList> _r = _t->findDomains();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QStringList>*>(_a[0]) = std::move(_r); }  break;
        case 12: { QDBusPendingReply<QString> _r = _t->getDomainAdvice((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 13: { QDBusPendingReply<QString> _r = _t->listCookies((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 14: { QDBusPendingReply<> _r = _t->reloadPolicy();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 15: { QDBusPendingReply<bool> _r = _t->setDomainAdvice((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 16: { QDBusPendingReply<> _r = _t->shutdown();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        switch (_id) {
        default: *reinterpret_cast<int*>(_a[0]) = -1; break;
        case 7:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QList<int> >(); break;
            }
            break;
        }
    }
}

QT_INIT_METAOBJECT const QMetaObject OrgKdeKCookieServerInterface::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractInterface::staticMetaObject>(),
    qt_meta_stringdata_OrgKdeKCookieServerInterface.data,
    qt_meta_data_OrgKdeKCookieServerInterface,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *OrgKdeKCookieServerInterface::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *OrgKdeKCookieServerInterface::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_OrgKdeKCookieServerInterface.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractInterface::qt_metacast(_clname);
}

int OrgKdeKCookieServerInterface::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractInterface::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
