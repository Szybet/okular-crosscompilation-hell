/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p virtualkeyboard_interface /home/szybet/kdesrc/frameworks/kirigami/src/libkirigami/org.kde.KWin.VirtualKeyboard.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef VIRTUALKEYBOARD_INTERFACE_H
#define VIRTUALKEYBOARD_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.DBus.Properties
 */
class OrgFreedesktopDBusPropertiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OrgFreedesktopDBusPropertiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopDBusPropertiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface_name, const QString &property_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name);
        return asyncCallWithArgumentList(QStringLiteral("Get"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetAll(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QStringLiteral("GetAll"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &interface_name, const QString &property_name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QString &interface_name, const QVariantMap &changed_properties, const QStringList &invalidated_properties);
};

/*
 * Proxy class for interface org.kde.kwin.VirtualKeyboard
 */
class OrgKdeKwinVirtualKeyboardInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.kwin.VirtualKeyboard"; }

public:
    OrgKdeKwinVirtualKeyboardInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeKwinVirtualKeyboardInterface();

    Q_PROPERTY(bool active READ active WRITE setActive)
    inline bool active() const
    { return qvariant_cast< bool >(property("active")); }
    inline void setActive(bool value)
    { setProperty("active", QVariant::fromValue(value)); }

    Q_PROPERTY(bool available READ available)
    inline bool available() const
    { return qvariant_cast< bool >(property("available")); }

    Q_PROPERTY(bool enabled READ enabled WRITE setEnabled)
    inline bool enabled() const
    { return qvariant_cast< bool >(property("enabled")); }
    inline void setEnabled(bool value)
    { setProperty("enabled", QVariant::fromValue(value)); }

    Q_PROPERTY(bool visible READ visible)
    inline bool visible() const
    { return qvariant_cast< bool >(property("visible")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> willShowOnActive()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("willShowOnActive"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void activeChanged();
    void availableChanged();
    void enabledChanged();
    void visibleChanged();
};

namespace org {
  namespace freedesktop {
    namespace DBus {
      typedef ::OrgFreedesktopDBusPropertiesInterface Properties;
    }
  }
  namespace kde {
    namespace kwin {
      typedef ::OrgKdeKwinVirtualKeyboardInterface VirtualKeyboard;
    }
  }
}
#endif
