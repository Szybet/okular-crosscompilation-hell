/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p jobviewiface /home/szybet/kdesrc/frameworks/kjobwidgets/src/org.kde.JobView.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef JOBVIEWIFACE_H
#define JOBVIEWIFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.JobViewV2
 */
class OrgKdeJobViewV2Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.JobViewV2"; }

public:
    OrgKdeJobViewV2Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeJobViewV2Interface();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void clearDescriptionField(uint number)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(number);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("clearDescriptionField"), argumentList);
    }

    inline QDBusPendingReply<bool> setDescriptionField(uint number, const QString &name, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(number) << QVariant::fromValue(name) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("setDescriptionField"), argumentList);
    }

    inline Q_NOREPLY void setDestUrl(const QDBusVariant &destUrl)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(destUrl);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setDestUrl"), argumentList);
    }

    inline Q_NOREPLY void setError(uint errorCode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(errorCode);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setError"), argumentList);
    }

    inline Q_NOREPLY void setInfoMessage(const QString &message)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(message);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setInfoMessage"), argumentList);
    }

    inline Q_NOREPLY void setPercent(uint percent)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(percent);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setPercent"), argumentList);
    }

    inline Q_NOREPLY void setProcessedAmount(qulonglong amount, const QString &unit)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(amount) << QVariant::fromValue(unit);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setProcessedAmount"), argumentList);
    }

    inline Q_NOREPLY void setSpeed(qulonglong bytesPerSecond)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(bytesPerSecond);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setSpeed"), argumentList);
    }

    inline Q_NOREPLY void setSuspended(bool suspended)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(suspended);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setSuspended"), argumentList);
    }

    inline Q_NOREPLY void setTotalAmount(qulonglong amount, const QString &unit)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(amount) << QVariant::fromValue(unit);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("setTotalAmount"), argumentList);
    }

    inline Q_NOREPLY void terminate(const QString &errorMessage)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(errorMessage);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("terminate"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void cancelRequested();
    void resumeRequested();
    void suspendRequested();
};

namespace org {
  namespace kde {
    typedef ::OrgKdeJobViewV2Interface JobViewV2;
  }
}
#endif
