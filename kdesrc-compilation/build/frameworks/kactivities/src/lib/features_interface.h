/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p features_interface /home/szybet/kdesrc/frameworks/kactivities/src/common/dbus/org.kde.ActivityManager.Features.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FEATURES_INTERFACE_H
#define FEATURES_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.ActivityManager.Features
 */
class OrgKdeActivityManagerFeaturesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.ActivityManager.Features"; }

public:
    OrgKdeActivityManagerFeaturesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeActivityManagerFeaturesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> GetValue(const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QStringLiteral("GetValue"), argumentList);
    }

    inline QDBusPendingReply<bool> IsFeatureOperational(const QString &feature)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(feature);
        return asyncCallWithArgumentList(QStringLiteral("IsFeatureOperational"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListFeatures(const QString &module)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(module);
        return asyncCallWithArgumentList(QStringLiteral("ListFeatures"), argumentList);
    }

    inline QDBusPendingReply<> SetValue(const QString &property, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(property) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("SetValue"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    namespace ActivityManager {
      typedef ::OrgKdeActivityManagerFeaturesInterface Features;
    }
  }
}
#endif
