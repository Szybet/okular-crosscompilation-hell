/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -i /home/szybet/kdesrc/frameworks/kactivities/src/common/dbus/org.kde.ActivityManager.Activities.h -p activities_interface /home/szybet/kdesrc/frameworks/kactivities/src/common/dbus/org.kde.ActivityManager.Activities.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ACTIVITIES_INTERFACE_H
#define ACTIVITIES_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/szybet/kdesrc/frameworks/kactivities/src/common/dbus/org.kde.ActivityManager.Activities.h"

/*
 * Proxy class for interface org.kde.ActivityManager.Activities
 */
class OrgKdeActivityManagerActivitiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.ActivityManager.Activities"; }

public:
    OrgKdeActivityManagerActivitiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeActivityManagerActivitiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> ActivityDescription(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("ActivityDescription"), argumentList);
    }

    inline QDBusPendingReply<QString> ActivityIcon(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("ActivityIcon"), argumentList);
    }

    inline QDBusPendingReply<ActivityInfo> ActivityInformation(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("ActivityInformation"), argumentList);
    }

    inline QDBusPendingReply<QString> ActivityName(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("ActivityName"), argumentList);
    }

    inline QDBusPendingReply<int> ActivityState(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("ActivityState"), argumentList);
    }

    inline QDBusPendingReply<QString> AddActivity(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("AddActivity"), argumentList);
    }

    inline QDBusPendingReply<QString> CurrentActivity()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CurrentActivity"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListActivities(int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QStringLiteral("ListActivities"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListActivities()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListActivities"), argumentList);
    }

    inline QDBusPendingReply<ActivityInfoList> ListActivitiesWithInformation()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListActivitiesWithInformation"), argumentList);
    }

    inline QDBusPendingReply<> RemoveActivity(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("RemoveActivity"), argumentList);
    }

    inline QDBusPendingReply<> SetActivityDescription(const QString &activity, const QString &description)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity) << QVariant::fromValue(description);
        return asyncCallWithArgumentList(QStringLiteral("SetActivityDescription"), argumentList);
    }

    inline QDBusPendingReply<> SetActivityIcon(const QString &activity, const QString &icon)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity) << QVariant::fromValue(icon);
        return asyncCallWithArgumentList(QStringLiteral("SetActivityIcon"), argumentList);
    }

    inline QDBusPendingReply<> SetActivityName(const QString &activity, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("SetActivityName"), argumentList);
    }

    inline QDBusPendingReply<bool> SetCurrentActivity(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("SetCurrentActivity"), argumentList);
    }

    inline QDBusPendingReply<> StartActivity(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("StartActivity"), argumentList);
    }

    inline QDBusPendingReply<> StopActivity(const QString &activity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activity);
        return asyncCallWithArgumentList(QStringLiteral("StopActivity"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActivityAdded(const QString &activity);
    void ActivityChanged(const QString &activity);
    void ActivityDescriptionChanged(const QString &activity, const QString &description);
    void ActivityIconChanged(const QString &activity, const QString &icon);
    void ActivityNameChanged(const QString &activity, const QString &name);
    void ActivityRemoved(const QString &activity);
    void ActivityStarted(const QString &activity);
    void ActivityStateChanged(const QString &activity, int state);
    void ActivityStopped(const QString &activity);
    void CurrentActivityChanged(const QString &activity);
};

namespace org {
  namespace kde {
    namespace ActivityManager {
      typedef ::OrgKdeActivityManagerActivitiesInterface Activities;
    }
  }
}
#endif
