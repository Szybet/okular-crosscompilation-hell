/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -i authinfo.h -p kpasswdserver_interface /home/szybet/kdesrc/frameworks/kio/src/core/org.kde.KPasswdServer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KPASSWDSERVER_INTERFACE_H
#define KPASSWDSERVER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "authinfo.h"

/*
 * Proxy class for interface org.kde.KPasswdServer
 */
class OrgKdeKPasswdServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KPasswdServer"; }

public:
    OrgKdeKPasswdServerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeKPasswdServerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addAuthInfo(KIO::AuthInfo info, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(info) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("addAuthInfo"), argumentList);
    }

    inline QDBusPendingReply<> addAuthInfo(const QByteArray &data, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data) << QVariant::fromValue(windowId);
        return asyncCallWithArgumentList(QStringLiteral("addAuthInfo"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> checkAuthInfo(const QByteArray &data, qlonglong windowId, qlonglong usertime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data) << QVariant::fromValue(windowId) << QVariant::fromValue(usertime);
        return asyncCallWithArgumentList(QStringLiteral("checkAuthInfo"), argumentList);
    }

    inline QDBusPendingReply<qlonglong> checkAuthInfoAsync(KIO::AuthInfo info, qlonglong windowId, qlonglong usertime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(info) << QVariant::fromValue(windowId) << QVariant::fromValue(usertime);
        return asyncCallWithArgumentList(QStringLiteral("checkAuthInfoAsync"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> queryAuthInfo(const QByteArray &data, const QString &errorMsg, qlonglong windowId, qlonglong seqNr, qlonglong usertime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data) << QVariant::fromValue(errorMsg) << QVariant::fromValue(windowId) << QVariant::fromValue(seqNr) << QVariant::fromValue(usertime);
        return asyncCallWithArgumentList(QStringLiteral("queryAuthInfo"), argumentList);
    }

    inline QDBusPendingReply<qlonglong> queryAuthInfoAsync(KIO::AuthInfo info, const QString &errorMsg, qlonglong windowId, qlonglong seqNr, qlonglong usertime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(info) << QVariant::fromValue(errorMsg) << QVariant::fromValue(windowId) << QVariant::fromValue(seqNr) << QVariant::fromValue(usertime);
        return asyncCallWithArgumentList(QStringLiteral("queryAuthInfoAsync"), argumentList);
    }

    inline QDBusPendingReply<> removeAuthInfo(const QString &host, const QString &protocol, const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(host) << QVariant::fromValue(protocol) << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("removeAuthInfo"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void checkAuthInfoAsyncResult(qlonglong requestId, qlonglong seqNr, KIO::AuthInfo info);
    void queryAuthInfoAsyncResult(qlonglong requestId, qlonglong seqNr, KIO::AuthInfo info);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKPasswdServerInterface KPasswdServer;
  }
}
#endif
