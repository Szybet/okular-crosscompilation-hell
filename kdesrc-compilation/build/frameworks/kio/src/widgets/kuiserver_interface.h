/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p kuiserver_interface /home/szybet/kdesrc/frameworks/kio/src/widgets/org.kde.kuiserver.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KUISERVER_INTERFACE_H
#define KUISERVER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.kuiserver
 */
class OrgKdeKuiserverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.kuiserver"; }

public:
    OrgKdeKuiserverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeKuiserverInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> emitJobUrlsChanged()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("emitJobUrlsChanged"), argumentList);
    }

    inline QDBusPendingReply<> registerService(const QString &service, const QString &objectPath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service) << QVariant::fromValue(objectPath);
        return asyncCallWithArgumentList(QStringLiteral("registerService"), argumentList);
    }

    inline QDBusPendingReply<bool> requiresJobTracker()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requiresJobTracker"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void jobUrlsChanged(const QStringList &in0);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKuiserverInterface kuiserver;
  }
}
#endif
