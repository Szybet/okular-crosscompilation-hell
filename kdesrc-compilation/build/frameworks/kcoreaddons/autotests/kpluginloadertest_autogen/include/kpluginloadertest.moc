/****************************************************************************
** Meta object code from reading C++ file 'kpluginloadertest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'kpluginloadertest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_KPluginLoaderTest_t {
    QByteArrayData data[17];
    char stringdata0[245];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_KPluginLoaderTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_KPluginLoaderTest_t qt_meta_stringdata_KPluginLoaderTest = {
    {
QT_MOC_LITERAL(0, 0, 17), // "KPluginLoaderTest"
QT_MOC_LITERAL(1, 18, 22), // "testFindPlugin_missing"
QT_MOC_LITERAL(2, 41, 0), // ""
QT_MOC_LITERAL(3, 42, 14), // "testFindPlugin"
QT_MOC_LITERAL(4, 57, 17), // "testPluginVersion"
QT_MOC_LITERAL(5, 75, 14), // "testPluginName"
QT_MOC_LITERAL(6, 90, 11), // "testFactory"
QT_MOC_LITERAL(7, 102, 15), // "testErrorString"
QT_MOC_LITERAL(8, 118, 12), // "testFileName"
QT_MOC_LITERAL(9, 131, 12), // "testInstance"
QT_MOC_LITERAL(10, 144, 12), // "testIsLoaded"
QT_MOC_LITERAL(11, 157, 8), // "testLoad"
QT_MOC_LITERAL(12, 166, 13), // "testLoadHints"
QT_MOC_LITERAL(13, 180, 12), // "testMetaData"
QT_MOC_LITERAL(14, 193, 10), // "testUnload"
QT_MOC_LITERAL(15, 204, 22), // "testInstantiatePlugins"
QT_MOC_LITERAL(16, 227, 17) // "testForEachPlugin"

    },
    "KPluginLoaderTest\0testFindPlugin_missing\0"
    "\0testFindPlugin\0testPluginVersion\0"
    "testPluginName\0testFactory\0testErrorString\0"
    "testFileName\0testInstance\0testIsLoaded\0"
    "testLoad\0testLoadHints\0testMetaData\0"
    "testUnload\0testInstantiatePlugins\0"
    "testForEachPlugin"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_KPluginLoaderTest[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      15,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   89,    2, 0x08 /* Private */,
       3,    0,   90,    2, 0x08 /* Private */,
       4,    0,   91,    2, 0x08 /* Private */,
       5,    0,   92,    2, 0x08 /* Private */,
       6,    0,   93,    2, 0x08 /* Private */,
       7,    0,   94,    2, 0x08 /* Private */,
       8,    0,   95,    2, 0x08 /* Private */,
       9,    0,   96,    2, 0x08 /* Private */,
      10,    0,   97,    2, 0x08 /* Private */,
      11,    0,   98,    2, 0x08 /* Private */,
      12,    0,   99,    2, 0x08 /* Private */,
      13,    0,  100,    2, 0x08 /* Private */,
      14,    0,  101,    2, 0x08 /* Private */,
      15,    0,  102,    2, 0x08 /* Private */,
      16,    0,  103,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void KPluginLoaderTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<KPluginLoaderTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->testFindPlugin_missing(); break;
        case 1: _t->testFindPlugin(); break;
        case 2: _t->testPluginVersion(); break;
        case 3: _t->testPluginName(); break;
        case 4: _t->testFactory(); break;
        case 5: _t->testErrorString(); break;
        case 6: _t->testFileName(); break;
        case 7: _t->testInstance(); break;
        case 8: _t->testIsLoaded(); break;
        case 9: _t->testLoad(); break;
        case 10: _t->testLoadHints(); break;
        case 11: _t->testMetaData(); break;
        case 12: _t->testUnload(); break;
        case 13: _t->testInstantiatePlugins(); break;
        case 14: _t->testForEachPlugin(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject KPluginLoaderTest::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_KPluginLoaderTest.data,
    qt_meta_data_KPluginLoaderTest,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *KPluginLoaderTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *KPluginLoaderTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_KPluginLoaderTest.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int KPluginLoaderTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 15)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 15;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 15)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 15;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
