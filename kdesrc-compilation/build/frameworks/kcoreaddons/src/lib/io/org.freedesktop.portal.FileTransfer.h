/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -i /home/szybet/kdesrc/frameworks/kcoreaddons/src/lib/io/dbustypes_p.h -p io/org.freedesktop.portal.FileTransfer /home/szybet/kdesrc/frameworks/kcoreaddons/src/lib/io/org.freedesktop.portal.FileTransfer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_FREEDESKTOP_PORTAL_FILETRANSFER_H
#define ORG_FREEDESKTOP_PORTAL_FILETRANSFER_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/szybet/kdesrc/frameworks/kcoreaddons/src/lib/io/dbustypes_p.h"

/*
 * Proxy class for interface org.freedesktop.portal.FileTransfer
 */
class OrgFreedesktopPortalFileTransferInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.portal.FileTransfer"; }

public:
    OrgFreedesktopPortalFileTransferInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopPortalFileTransferInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddFiles(const QString &key, FDList fds, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(fds) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("AddFiles"), argumentList);
    }

    inline QDBusPendingReply<QStringList> RetrieveFiles(const QString &key, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("RetrieveFiles"), argumentList);
    }

    inline QDBusPendingReply<QString> StartTransfer(const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("StartTransfer"), argumentList);
    }

    inline QDBusPendingReply<> StopTransfer(const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("StopTransfer"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void TransferClosed(const QString &key);
};

namespace org {
  namespace freedesktop {
    namespace portal {
      typedef ::OrgFreedesktopPortalFileTransferInterface FileTransfer;
    }
  }
}
#endif
