/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -i kglobalshortcutinfo_p.h -p kglobalaccel_interface /home/szybet/kdesrc/frameworks/kglobalaccel/src/org.kde.KGlobalAccel.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KGLOBALACCEL_INTERFACE_H
#define KGLOBALACCEL_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "kglobalshortcutinfo_p.h"

/*
 * Proxy class for interface org.kde.KGlobalAccel
 */
class OrgKdeKGlobalAccelInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KGlobalAccel"; }

public:
    OrgKdeKGlobalAccelInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeKGlobalAccelInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QStringList> action(int key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("action"), argumentList);
    }

    inline QDBusPendingReply<QStringList> actionList(const QKeySequence &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("actionList"), argumentList);
    }

    inline QDBusPendingReply<> activateGlobalShortcutContext(const QString &component, const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(component) << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("activateGlobalShortcutContext"), argumentList);
    }

    inline QDBusPendingReply<QList<QStringList> > allActionsForComponent(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("allActionsForComponent"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > allComponents()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("allComponents"), argumentList);
    }

    inline QDBusPendingReply<QList<QStringList> > allMainComponents()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("allMainComponents"), argumentList);
    }

    inline QDBusPendingReply<> blockGlobalShortcuts(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("blockGlobalShortcuts"), argumentList);
    }

    inline QDBusPendingReply<QList<int> > defaultShortcut(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("defaultShortcut"), argumentList);
    }

    inline QDBusPendingReply<QList<QKeySequence> > defaultShortcutKeys(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("defaultShortcutKeys"), argumentList);
    }

    inline QDBusPendingReply<> doRegister(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("doRegister"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getComponent(const QString &componentUnique)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(componentUnique);
        return asyncCallWithArgumentList(QStringLiteral("getComponent"), argumentList);
    }

    inline QDBusPendingReply<QList<KGlobalShortcutInfo> > getGlobalShortcutsByKey(int key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("getGlobalShortcutsByKey"), argumentList);
    }

    inline QDBusPendingReply<bool> globalShortcutAvailable(const QKeySequence &key, const QString &component)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(component);
        return asyncCallWithArgumentList(QStringLiteral("globalShortcutAvailable"), argumentList);
    }

    inline QDBusPendingReply<QList<KGlobalShortcutInfo> > globalShortcutsByKey(const QKeySequence &key, KGlobalAccel::MatchType matchType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(matchType);
        return asyncCallWithArgumentList(QStringLiteral("globalShortcutsByKey"), argumentList);
    }

    inline QDBusPendingReply<bool> isGlobalShortcutAvailable(int key, const QString &component)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(component);
        return asyncCallWithArgumentList(QStringLiteral("isGlobalShortcutAvailable"), argumentList);
    }

    inline QDBusPendingReply<> setForeignShortcut(const QStringList &actionId, const QList<int> &keys)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId) << QVariant::fromValue(keys);
        return asyncCallWithArgumentList(QStringLiteral("setForeignShortcut"), argumentList);
    }

    inline QDBusPendingReply<> setForeignShortcutKeys(const QStringList &actionId, const QList<QKeySequence> &keys)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId) << QVariant::fromValue(keys);
        return asyncCallWithArgumentList(QStringLiteral("setForeignShortcutKeys"), argumentList);
    }

    inline QDBusPendingReply<> setInactive(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("setInactive"), argumentList);
    }

    inline QDBusPendingReply<QList<int> > setShortcut(const QStringList &actionId, const QList<int> &keys, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId) << QVariant::fromValue(keys) << QVariant::fromValue(flags);
        return asyncCallWithArgumentList(QStringLiteral("setShortcut"), argumentList);
    }

    inline QDBusPendingReply<QList<QKeySequence> > setShortcutKeys(const QStringList &actionId, const QList<QKeySequence> &keys, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId) << QVariant::fromValue(keys) << QVariant::fromValue(flags);
        return asyncCallWithArgumentList(QStringLiteral("setShortcutKeys"), argumentList);
    }

    inline QDBusPendingReply<QList<int> > shortcut(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("shortcut"), argumentList);
    }

    inline QDBusPendingReply<QList<QKeySequence> > shortcutKeys(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("shortcutKeys"), argumentList);
    }

    inline QDBusPendingReply<> unRegister(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(actionId);
        return asyncCallWithArgumentList(QStringLiteral("unRegister"), argumentList);
    }

    inline QDBusPendingReply<bool> unregister(const QString &componentUnique, const QString &shortcutUnique)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(componentUnique) << QVariant::fromValue(shortcutUnique);
        return asyncCallWithArgumentList(QStringLiteral("unregister"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void yourShortcutGotChanged(const QStringList &actionId, const QList<int> &newKeys);
    void yourShortcutsChanged(const QStringList &actionId, const QList<QKeySequence> &newKeys);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKGlobalAccelInterface KGlobalAccel;
  }
}
#endif
