// This file is generated by kconfig_compiler_kf5 from signaltest.kcfg.
// All changes you do to this file will be lost.

#include "signaltest.h"

#include <qglobal.h>
#include <QFile>

class SignalTestHelper
{
  public:
    SignalTestHelper() : q(nullptr) {}
    ~SignalTestHelper() { delete q; q = nullptr; }
    SignalTestHelper(const SignalTestHelper&) = delete;
    SignalTestHelper& operator=(const SignalTestHelper&) = delete;
    SignalTest *q;
};
Q_GLOBAL_STATIC(SignalTestHelper, s_globalSignalTest)
SignalTest *SignalTest::self()
{
  if (!s_globalSignalTest()->q) {
    new SignalTest;
    s_globalSignalTest()->q->read();
  }

  return s_globalSignalTest()->q;
}

SignalTest::SignalTest( )
  : KConfigSkeleton( QStringLiteral( "kconfigdialog_unittestrc" ) )
{
  Q_ASSERT(!s_globalSignalTest()->q);
  s_globalSignalTest()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&SignalTest::itemChanged);

  setCurrentGroup( QStringLiteral( "Group1" ) );

  KConfigCompilerSignallingItem  *itemFoo;
  KConfigSkeleton::ItemString  *innerItemFoo;
  innerItemFoo = new KConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "foo" ), mFoo, QStringLiteral( "default value" ) );
  itemFoo = new KConfigCompilerSignallingItem(innerItemFoo, this, notifyFunction, signalFooChanged);
  addItem( itemFoo, QStringLiteral( "foo" ) );
}

QString SignalTest::defaultFooValue_helper()
{

  return QStringLiteral( "default value" );
}

SignalTest::~SignalTest()
{
  if (s_globalSignalTest.exists() && !s_globalSignalTest.isDestroyed()) {
    s_globalSignalTest()->q = nullptr;
  }
}

bool SignalTest::usrSave()
{
  const bool res = KConfigSkeleton::usrSave();
  if (!res) return false;

  if (mSettingsChanged.contains(signalFooChanged))
    Q_EMIT fooChanged(mFoo);
  mSettingsChanged.clear();
  return true;
}

void SignalTest::itemChanged(quint64 signalFlag) {
  mSettingsChanged.insert(signalFlag);

}

#include "signaltest.moc"

