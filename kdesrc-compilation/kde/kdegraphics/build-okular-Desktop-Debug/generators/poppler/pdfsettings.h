// This file is generated by kconfig_compiler_kf5 from pdfsettings.kcfg.
// All changes you do to this file will be lost.
#ifndef PDFSETTINGS_H
#define PDFSETTINGS_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>
#include <QSet>

class PDFSettings : public KConfigSkeleton
{
  Q_OBJECT
  public:
    class EnumEnhanceThinLines
    {
      public:
      enum type { No, Solid, Shape, COUNT };
    };

    static PDFSettings *self();
    ~PDFSettings() override;

    /**
      Set EnhanceThinLines
    */
    static
    void setEnhanceThinLines( int v )
    {
      if (!self()->isEnhanceThinLinesImmutable())
        self()->mEnhanceThinLines = v;
    }

    /**
      Get EnhanceThinLines
    */
    static
    int enhanceThinLines()
    {
      return self()->mEnhanceThinLines;
    }

    /**
      Is EnhanceThinLines Immutable
    */
    static
    bool isEnhanceThinLinesImmutable()
    {
      return self()->isImmutable( QStringLiteral( "EnhanceThinLines" ) );
    }

    /**
      Set UseDefaultCertDB
    */
    static
    void setUseDefaultCertDB( bool v )
    {
      if (v != self()->mUseDefaultCertDB && !self()->isUseDefaultCertDBImmutable()) {
        self()->mUseDefaultCertDB = v;
        self()->mSettingsChanged.insert(signalUseDefaultDBChanged);
      }
    }

    /**
      Get UseDefaultCertDB
    */
    static
    bool useDefaultCertDB()
    {
      return self()->mUseDefaultCertDB;
    }

    /**
      Is UseDefaultCertDB Immutable
    */
    static
    bool isUseDefaultCertDBImmutable()
    {
      return self()->isImmutable( QStringLiteral( "UseDefaultCertDB" ) );
    }

    /**
      Set DBCertificatePath
    */
    static
    void setDBCertificatePath( const QString & v )
    {
      if (v != self()->mDBCertificatePath && !self()->isDBCertificatePathImmutable()) {
        self()->mDBCertificatePath = v;
        self()->mSettingsChanged.insert(signalDBCertificatePathChanged);
      }
    }

    /**
      Get DBCertificatePath
    */
    static
    QString dBCertificatePath()
    {
      return self()->mDBCertificatePath;
    }

    /**
      Is DBCertificatePath Immutable
    */
    static
    bool isDBCertificatePathImmutable()
    {
      return self()->isImmutable( QStringLiteral( "DBCertificatePath" ) );
    }

    /**
      Set CheckOCSPServers
    */
    static
    void setCheckOCSPServers( bool v )
    {
      if (!self()->isCheckOCSPServersImmutable())
        self()->mCheckOCSPServers = v;
    }

    /**
      Get CheckOCSPServers
    */
    static
    bool checkOCSPServers()
    {
      return self()->mCheckOCSPServers;
    }

    /**
      Is CheckOCSPServers Immutable
    */
    static
    bool isCheckOCSPServersImmutable()
    {
      return self()->isImmutable( QStringLiteral( "CheckOCSPServers" ) );
    }


    enum {
      signalUseDefaultDBChanged = 1,
      signalDBCertificatePathChanged = 2
    };

  Q_SIGNALS:
    void useDefaultDBChanged();

    void dBCertificatePathChanged();

  private:
    void itemChanged(quint64 signalFlag);

  protected:
    PDFSettings();
    friend class PDFSettingsHelper;

    bool usrSave() override;

    // General
    int mEnhanceThinLines;

    // Signatures
    bool mUseDefaultCertDB;
    QString mDBCertificatePath;
    bool mCheckOCSPServers;

  private:
    QSet<quint64> mSettingsChanged;
};

#endif

