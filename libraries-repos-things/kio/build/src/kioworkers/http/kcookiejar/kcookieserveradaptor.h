/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a kcookieserveradaptor -i kcookieserver.h -l KCookieServer /mnt/HDD/Project/Public/okulartry/kio/build/src/kioworkers/http/kcookiejar/org.kde.KCookieServer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef KCOOKIESERVERADAPTOR_H
#define KCOOKIESERVERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "kcookieserver.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.kde.KCookieServer
 */
class KCookieServerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.KCookieServer")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.KCookieServer\">\n"
"    <method name=\"listCookies\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"findCookies\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n"
"    </method>\n"
"    <method name=\"findDomains\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"findCookies\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"      <arg direction=\"in\" type=\"ai\" name=\"fields\"/>\n"
"      <annotation value=\"QList&lt;int&gt;\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"domain\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"fqdn\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"path\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
"    </method>\n"
"    <method name=\"findDOMCookies\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"findDOMCookies\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n"
"    </method>\n"
"    <method name=\"addCookies\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"      <arg direction=\"in\" type=\"ay\" name=\"cookieHeader\"/>\n"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n"
"    </method>\n"
"    <method name=\"deleteCookie\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"domain\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"fqdn\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"path\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
"    </method>\n"
"    <method name=\"deleteCookiesFromDomain\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"domain\"/>\n"
"    </method>\n"
"    <method name=\"deleteSessionCookies\">\n"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n"
"    </method>\n"
"    <method name=\"deleteSessionCookiesFor\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"fqdn\"/>\n"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n"
"    </method>\n"
"    <method name=\"deleteAllCookies\"/>\n"
"    <method name=\"addDOMCookies\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"      <arg direction=\"in\" type=\"ay\" name=\"cookieHeader\"/>\n"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n"
"    </method>\n"
"    <method name=\"setDomainAdvice\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"advice\"/>\n"
"    </method>\n"
"    <method name=\"getDomainAdvice\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"reloadPolicy\"/>\n"
"    <method name=\"shutdown\"/>\n"
"  </interface>\n"
        "")
public:
    KCookieServerAdaptor(KCookieServer *parent);
    virtual ~KCookieServerAdaptor();

    inline KCookieServer *parent() const
    { return static_cast<KCookieServer *>(QObject::parent()); }

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void addCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId);
    void addDOMCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId);
    void deleteAllCookies();
    void deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name);
    void deleteCookiesFromDomain(const QString &domain);
    void deleteSessionCookies(qlonglong windowId);
    void deleteSessionCookiesFor(const QString &fqdn, qlonglong windowId);
    QStringList findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name);
    QString findCookies(const QString &url, qlonglong windowId);
    QString findDOMCookies(const QString &url, qlonglong windowId);
    QString findDOMCookies(const QString &url);
    QStringList findDomains();
    QString getDomainAdvice(const QString &url);
    QString listCookies(const QString &url);
    void reloadPolicy();
    bool setDomainAdvice(const QString &url, const QString &advice);
    void shutdown();
Q_SIGNALS: // SIGNALS
};

#endif
