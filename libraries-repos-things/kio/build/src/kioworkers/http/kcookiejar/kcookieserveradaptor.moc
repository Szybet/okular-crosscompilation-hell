/****************************************************************************
** Meta object code from reading C++ file 'kcookieserveradaptor.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "kcookieserveradaptor.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#include <QtCore/QList>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'kcookieserveradaptor.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_KCookieServerAdaptor_t {
    QByteArrayData data[31];
    char stringdata0[3357];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_KCookieServerAdaptor_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_KCookieServerAdaptor_t qt_meta_stringdata_KCookieServerAdaptor = {
    {
QT_MOC_LITERAL(0, 0, 20), // "KCookieServerAdaptor"
QT_MOC_LITERAL(1, 21, 15), // "D-Bus Interface"
QT_MOC_LITERAL(2, 37, 21), // "org.kde.KCookieServer"
QT_MOC_LITERAL(3, 59, 19), // "D-Bus Introspection"
QT_MOC_LITERAL(4, 79, 2974), // "  <interface name=\"org.kde.K..."
QT_MOC_LITERAL(5, 2744, 10), // "addCookies"
QT_MOC_LITERAL(6, 2755, 0), // ""
QT_MOC_LITERAL(7, 2756, 3), // "url"
QT_MOC_LITERAL(8, 2760, 12), // "cookieHeader"
QT_MOC_LITERAL(9, 2773, 8), // "windowId"
QT_MOC_LITERAL(10, 2782, 13), // "addDOMCookies"
QT_MOC_LITERAL(11, 2796, 16), // "deleteAllCookies"
QT_MOC_LITERAL(12, 2813, 12), // "deleteCookie"
QT_MOC_LITERAL(13, 2826, 6), // "domain"
QT_MOC_LITERAL(14, 2833, 4), // "fqdn"
QT_MOC_LITERAL(15, 2838, 4), // "path"
QT_MOC_LITERAL(16, 2843, 4), // "name"
QT_MOC_LITERAL(17, 2848, 23), // "deleteCookiesFromDomain"
QT_MOC_LITERAL(18, 2872, 20), // "deleteSessionCookies"
QT_MOC_LITERAL(19, 2893, 23), // "deleteSessionCookiesFor"
QT_MOC_LITERAL(20, 2917, 11), // "findCookies"
QT_MOC_LITERAL(21, 2929, 10), // "QList<int>"
QT_MOC_LITERAL(22, 2940, 6), // "fields"
QT_MOC_LITERAL(23, 2947, 14), // "findDOMCookies"
QT_MOC_LITERAL(24, 2962, 11), // "findDomains"
QT_MOC_LITERAL(25, 2974, 15), // "getDomainAdvice"
QT_MOC_LITERAL(26, 2990, 11), // "listCookies"
QT_MOC_LITERAL(27, 3002, 12), // "reloadPolicy"
QT_MOC_LITERAL(28, 3015, 15), // "setDomainAdvice"
QT_MOC_LITERAL(29, 3031, 6), // "advice"
QT_MOC_LITERAL(30, 3038, 8) // "shutdown"

    },
    "KCookieServerAdaptor\0D-Bus Interface\0"
    "org.kde.KCookieServer\0D-Bus Introspection\0"
    "  <interface name=\"org.kde.KCookieServer\">\n    <method name=\"listC"
    "ookies\">\n      <arg direction=\"out\" type=\"s\"/>\n      <arg direc"
    "tion=\"in\" type=\"s\" name=\"url\"/>\n    </method>\n    <method name"
    "=\"findCookies\">\n      <arg direction=\"out\" type=\"s\"/>\n      <a"
    "rg direction=\"in\" type=\"s\" name=\"url\"/>\n      <arg direction=\""
    "in\" type=\"x\" name=\"windowId\"/>\n    </method>\n    <method name=\""
    "findDomains\">\n      <arg direction=\"out\" type=\"as\"/>\n    </meth"
    "od>\n    <method name=\"findCookies\">\n      <arg direction=\"out\" t"
    "ype=\"as\"/>\n      <arg direction=\"in\" type=\"ai\" name=\"fields\"/"
    ">\n      <annotation value=\"QList&lt;int&gt;\" name=\"org.qtproject.Q"
    "tDBus.QtTypeName.In0\"/>\n      <arg direction=\"in\" type=\"s\" name="
    "\"domain\"/>\n      <arg direction=\"in\" type=\"s\" name=\"fqdn\"/>\n"
    "      <arg direction=\"in\" type=\"s\" name=\"path\"/>\n      <arg dir"
    "ection=\"in\" type=\"s\" name=\"name\"/>\n    </method>\n    <method n"
    "ame=\"findDOMCookies\">\n      <arg direction=\"out\" type=\"s\"/>\n  "
    "    <arg direction=\"in\" type=\"s\" name=\"url\"/>\n    </method>\n  "
    "  <method name=\"findDOMCookies\">\n      <arg direction=\"out\" type="
    "\"s\"/>\n      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n      "
    "<arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n    </method>\n "
    "   <method name=\"addCookies\">\n      <arg direction=\"in\" type=\"s\""
    " name=\"url\"/>\n      <arg direction=\"in\" type=\"ay\" name=\"cookie"
    "Header\"/>\n      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>"
    "\n    </method>\n    <method name=\"deleteCookie\">\n      <arg direct"
    "ion=\"in\" type=\"s\" name=\"domain\"/>\n      <arg direction=\"in\" t"
    "ype=\"s\" name=\"fqdn\"/>\n      <arg direction=\"in\" type=\"s\" name"
    "=\"path\"/>\n      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n "
    "   </method>\n    <method name=\"deleteCookiesFromDomain\">\n      <ar"
    "g direction=\"in\" type=\"s\" name=\"domain\"/>\n    </method>\n    <m"
    "ethod name=\"deleteSessionCookies\">\n      <arg direction=\"in\" type"
    "=\"x\" name=\"windowId\"/>\n    </method>\n    <method name=\"deleteSe"
    "ssionCookiesFor\">\n      <arg direction=\"in\" type=\"s\" name=\"fqdn"
    "\"/>\n      <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n    "
    "</method>\n    <method name=\"deleteAllCookies\"/>\n    <method name=\""
    "addDOMCookies\">\n      <arg direction=\"in\" type=\"s\" name=\"url\"/"
    ">\n      <arg direction=\"in\" type=\"ay\" name=\"cookieHeader\"/>\n  "
    "    <arg direction=\"in\" type=\"x\" name=\"windowId\"/>\n    </method"
    ">\n    <method name=\"setDomainAdvice\">\n      <arg direction=\"out\""
    " type=\"b\"/>\n      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
    "      <arg direction=\"in\" type=\"s\" name=\"advice\"/>\n    </method"
    ">\n    <method name=\"getDomainAdvice\">\n      <arg direction=\"out\""
    " type=\"s\"/>\n      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
    "    </method>\n    <method name=\"reloadPolicy\"/>\n    <method name=\""
    "shutdown\"/>\n  </interface>\n\0"
    "addCookies\0\0url\0cookieHeader\0windowId\0"
    "addDOMCookies\0deleteAllCookies\0"
    "deleteCookie\0domain\0fqdn\0path\0name\0"
    "deleteCookiesFromDomain\0deleteSessionCookies\0"
    "deleteSessionCookiesFor\0findCookies\0"
    "QList<int>\0fields\0findDOMCookies\0"
    "findDomains\0getDomainAdvice\0listCookies\0"
    "reloadPolicy\0setDomainAdvice\0advice\0"
    "shutdown"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_KCookieServerAdaptor[] = {

 // content:
       8,       // revision
       0,       // classname
       2,   14, // classinfo
      17,   18, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // classinfo: key, value
       1,    2,
       3,    4,

 // slots: name, argc, parameters, tag, flags
       5,    3,  103,    6, 0x0a /* Public */,
      10,    3,  110,    6, 0x0a /* Public */,
      11,    0,  117,    6, 0x0a /* Public */,
      12,    4,  118,    6, 0x0a /* Public */,
      17,    1,  127,    6, 0x0a /* Public */,
      18,    1,  130,    6, 0x0a /* Public */,
      19,    2,  133,    6, 0x0a /* Public */,
      20,    5,  138,    6, 0x0a /* Public */,
      20,    2,  149,    6, 0x0a /* Public */,
      23,    2,  154,    6, 0x0a /* Public */,
      23,    1,  159,    6, 0x0a /* Public */,
      24,    0,  162,    6, 0x0a /* Public */,
      25,    1,  163,    6, 0x0a /* Public */,
      26,    1,  166,    6, 0x0a /* Public */,
      27,    0,  169,    6, 0x0a /* Public */,
      28,    2,  170,    6, 0x0a /* Public */,
      30,    0,  175,    6, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Void, QMetaType::QString, QMetaType::QByteArray, QMetaType::LongLong,    7,    8,    9,
    QMetaType::Void, QMetaType::QString, QMetaType::QByteArray, QMetaType::LongLong,    7,    8,    9,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString, QMetaType::QString, QMetaType::QString, QMetaType::QString,   13,   14,   15,   16,
    QMetaType::Void, QMetaType::QString,   13,
    QMetaType::Void, QMetaType::LongLong,    9,
    QMetaType::Void, QMetaType::QString, QMetaType::LongLong,   14,    9,
    QMetaType::QStringList, 0x80000000 | 21, QMetaType::QString, QMetaType::QString, QMetaType::QString, QMetaType::QString,   22,   13,   14,   15,   16,
    QMetaType::QString, QMetaType::QString, QMetaType::LongLong,    7,    9,
    QMetaType::QString, QMetaType::QString, QMetaType::LongLong,    7,    9,
    QMetaType::QString, QMetaType::QString,    7,
    QMetaType::QStringList,
    QMetaType::QString, QMetaType::QString,    7,
    QMetaType::QString, QMetaType::QString,    7,
    QMetaType::Void,
    QMetaType::Bool, QMetaType::QString, QMetaType::QString,    7,   29,
    QMetaType::Void,

       0        // eod
};

void KCookieServerAdaptor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<KCookieServerAdaptor *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->addCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QByteArray(*)>(_a[2])),(*reinterpret_cast< qlonglong(*)>(_a[3]))); break;
        case 1: _t->addDOMCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QByteArray(*)>(_a[2])),(*reinterpret_cast< qlonglong(*)>(_a[3]))); break;
        case 2: _t->deleteAllCookies(); break;
        case 3: _t->deleteCookie((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4]))); break;
        case 4: _t->deleteCookiesFromDomain((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 5: _t->deleteSessionCookies((*reinterpret_cast< qlonglong(*)>(_a[1]))); break;
        case 6: _t->deleteSessionCookiesFor((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< qlonglong(*)>(_a[2]))); break;
        case 7: { QStringList _r = _t->findCookies((*reinterpret_cast< const QList<int>(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])),(*reinterpret_cast< const QString(*)>(_a[5])));
            if (_a[0]) *reinterpret_cast< QStringList*>(_a[0]) = std::move(_r); }  break;
        case 8: { QString _r = _t->findCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< qlonglong(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 9: { QString _r = _t->findDOMCookies((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< qlonglong(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 10: { QString _r = _t->findDOMCookies((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 11: { QStringList _r = _t->findDomains();
            if (_a[0]) *reinterpret_cast< QStringList*>(_a[0]) = std::move(_r); }  break;
        case 12: { QString _r = _t->getDomainAdvice((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 13: { QString _r = _t->listCookies((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 14: _t->reloadPolicy(); break;
        case 15: { bool _r = _t->setDomainAdvice((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 16: _t->shutdown(); break;
        default: ;
        }
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        switch (_id) {
        default: *reinterpret_cast<int*>(_a[0]) = -1; break;
        case 7:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< QList<int> >(); break;
            }
            break;
        }
    }
}

QT_INIT_METAOBJECT const QMetaObject KCookieServerAdaptor::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractAdaptor::staticMetaObject>(),
    qt_meta_stringdata_KCookieServerAdaptor.data,
    qt_meta_data_KCookieServerAdaptor,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *KCookieServerAdaptor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *KCookieServerAdaptor::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_KCookieServerAdaptor.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractAdaptor::qt_metacast(_clname);
}

int KCookieServerAdaptor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractAdaptor::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
