/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a kcookieserveradaptor -i kcookieserver.h -l KCookieServer /mnt/HDD/Project/Public/okulartry/kio/build/src/kioworkers/http/kcookiejar/org.kde.KCookieServer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "kcookieserveradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KCookieServerAdaptor
 */

KCookieServerAdaptor::KCookieServerAdaptor(KCookieServer *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KCookieServerAdaptor::~KCookieServerAdaptor()
{
    // destructor
}

void KCookieServerAdaptor::addCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.addCookies
    parent()->addCookies(url, cookieHeader, windowId);
}

void KCookieServerAdaptor::addDOMCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.addDOMCookies
    parent()->addDOMCookies(url, cookieHeader, windowId);
}

void KCookieServerAdaptor::deleteAllCookies()
{
    // handle method call org.kde.KCookieServer.deleteAllCookies
    parent()->deleteAllCookies();
}

void KCookieServerAdaptor::deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name)
{
    // handle method call org.kde.KCookieServer.deleteCookie
    parent()->deleteCookie(domain, fqdn, path, name);
}

void KCookieServerAdaptor::deleteCookiesFromDomain(const QString &domain)
{
    // handle method call org.kde.KCookieServer.deleteCookiesFromDomain
    parent()->deleteCookiesFromDomain(domain);
}

void KCookieServerAdaptor::deleteSessionCookies(qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.deleteSessionCookies
    parent()->deleteSessionCookies(windowId);
}

void KCookieServerAdaptor::deleteSessionCookiesFor(const QString &fqdn, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.deleteSessionCookiesFor
    parent()->deleteSessionCookiesFor(fqdn, windowId);
}

QStringList KCookieServerAdaptor::findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name)
{
    // handle method call org.kde.KCookieServer.findCookies
    return parent()->findCookies(fields, domain, fqdn, path, name);
}

QString KCookieServerAdaptor::findCookies(const QString &url, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.findCookies
    return parent()->findCookies(url, windowId);
}

QString KCookieServerAdaptor::findDOMCookies(const QString &url, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.findDOMCookies
    return parent()->findDOMCookies(url, windowId);
}

QString KCookieServerAdaptor::findDOMCookies(const QString &url)
{
    // handle method call org.kde.KCookieServer.findDOMCookies
    return parent()->findDOMCookies(url);
}

QStringList KCookieServerAdaptor::findDomains()
{
    // handle method call org.kde.KCookieServer.findDomains
    return parent()->findDomains();
}

QString KCookieServerAdaptor::getDomainAdvice(const QString &url)
{
    // handle method call org.kde.KCookieServer.getDomainAdvice
    return parent()->getDomainAdvice(url);
}

QString KCookieServerAdaptor::listCookies(const QString &url)
{
    // handle method call org.kde.KCookieServer.listCookies
    return parent()->listCookies(url);
}

void KCookieServerAdaptor::reloadPolicy()
{
    // handle method call org.kde.KCookieServer.reloadPolicy
    parent()->reloadPolicy();
}

bool KCookieServerAdaptor::setDomainAdvice(const QString &url, const QString &advice)
{
    // handle method call org.kde.KCookieServer.setDomainAdvice
    return parent()->setDomainAdvice(url, advice);
}

void KCookieServerAdaptor::shutdown()
{
    // handle method call org.kde.KCookieServer.shutdown
    parent()->shutdown();
}


#include "kcookieserveradaptor.moc"
