/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a kslavelauncheradaptor -i klauncher.h -l KLauncher /home/build/inkbox/compiled-binaries/arm-kobo-linux-gnueabihf/arm-kobo-linux-gnueabihf/sysroot/share/dbus-1/interfaces/kf5_org.kde.KSlaveLauncher.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef KSLAVELAUNCHERADAPTOR_H
#define KSLAVELAUNCHERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "klauncher.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.kde.KSlaveLauncher
 */
class KSlaveLauncherAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.KSlaveLauncher")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.KSlaveLauncher\">\n"
"    <method name=\"requestHoldSlave\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"app_socket\"/>\n"
"    </method>\n"
"    <method name=\"requestSlave\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"protocol\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"host\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"app_socket\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"error\"/>\n"
"    </method>\n"
"    <method name=\"checkForHeldSlave\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"waitForSlave\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"pid\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    KSlaveLauncherAdaptor(KLauncher *parent);
    virtual ~KSlaveLauncherAdaptor();

    inline KLauncher *parent() const
    { return static_cast<KLauncher *>(QObject::parent()); }

public: // PROPERTIES
public Q_SLOTS: // METHODS
    bool checkForHeldSlave(const QString &url);
    int requestHoldSlave(const QString &url, const QString &app_socket);
    int requestSlave(const QString &protocol, const QString &host, const QString &app_socket, QString &error);
    void waitForSlave(int pid);
Q_SIGNALS: // SIGNALS
};

#endif
