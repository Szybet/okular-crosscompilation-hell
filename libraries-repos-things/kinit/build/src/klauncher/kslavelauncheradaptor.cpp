/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a kslavelauncheradaptor -i klauncher.h -l KLauncher /home/build/inkbox/compiled-binaries/arm-kobo-linux-gnueabihf/arm-kobo-linux-gnueabihf/sysroot/share/dbus-1/interfaces/kf5_org.kde.KSlaveLauncher.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "kslavelauncheradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KSlaveLauncherAdaptor
 */

KSlaveLauncherAdaptor::KSlaveLauncherAdaptor(KLauncher *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KSlaveLauncherAdaptor::~KSlaveLauncherAdaptor()
{
    // destructor
}

bool KSlaveLauncherAdaptor::checkForHeldSlave(const QString &url)
{
    // handle method call org.kde.KSlaveLauncher.checkForHeldSlave
    return parent()->checkForHeldSlave(url);
}

int KSlaveLauncherAdaptor::requestHoldSlave(const QString &url, const QString &app_socket)
{
    // handle method call org.kde.KSlaveLauncher.requestHoldSlave
    return parent()->requestHoldSlave(url, app_socket);
}

int KSlaveLauncherAdaptor::requestSlave(const QString &protocol, const QString &host, const QString &app_socket, QString &error)
{
    // handle method call org.kde.KSlaveLauncher.requestSlave
    return parent()->requestSlave(protocol, host, app_socket, error);
}

void KSlaveLauncherAdaptor::waitForSlave(int pid)
{
    // handle method call org.kde.KSlaveLauncher.waitForSlave
    parent()->waitForSlave(pid);
}


#include "kslavelauncheradaptor.moc"
